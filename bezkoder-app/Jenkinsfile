pipeline {
  environment {
    DOCKER_HUB_PASSWORD  = credentials('docker_hub_password')
    DOCKER_HUB_REGISTRY="https://index.docker.io/v1/"
    DOCKER_HUB_USER= "zakariaasadek"
    ARTIFACTORY_ACCESS_TOKEN = credentials('artifactory-access-token')
    JENKINS_SONAR_TOKEN = credentials('jenkins_sonar_token')
    CI = true
  }
  agent {
    kubernetes {
      yaml '''
        apiVersion: v1
        kind: Pod
        spec:
          containers:
          - name: maven
            image: maven:3.8.1-adoptopenjdk-11
            command:
            - cat
            tty: true
          - name: jfrog
            image: releases-docker.jfrog.io/jfrog/jfrog-cli-v2:2.2.0
            command: ['cat']
            tty: true  
          - name: ab
            image: zakariaasadek/apache_benchmark:latest
            command: ['cat']
            tty: true
          - name: docker
            image: docker:1.11
            command: ['cat']
            tty: true
            volumeMounts:
            - name: dockersock
              mountPath: /var/run/docker.sock
          volumes:
          - name: dockersock
            hostPath:
              path: /var/run/docker.sock
        '''
    }
  }
  stages {
     
     stage('maven-build') {
       steps {
         container('maven') {
           sh 'mvn clean package -B -f bezkoder-app/pom.xml'
         }
       }
       post {
        always {
          archiveArtifacts artifacts: 'bezkoder-app/target/spring-boot-data-jpa-0.0.1-SNAPSHOT.jar', fingerprint: true
        }
      }
     }
     stage('Upload to artifactory') {
       steps {
         container('jfrog') {
          sh 'export HTTPS_PROXY=http://www-proxy-hqdc.us.oracle.com:80/'
          sh 'export http_proxy=http://www-proxy-hqdc.us.oracle.com:80/' 
          sh 'jfrog rt ping --url=http://artifactory.artifactory.svc:8081/artifactory/'
          sh 'jfrog rt upload --url http://artifactory.artifactory.svc:8081/artifactory/container_solutions_task --access-token ${ARTIFACTORY_ACCESS_TOKEN} bezkoder-app/target/spring-boot-data-jpa-0.0.1-SNAPSHOT.jar container_solutions_task/'
         }
       }
     }
     stage('unit_test') {
       steps {
         container('maven') {
           sh 'mvn test -Dtest=SpringBootDataJpaApplicationUnitTest -f bezkoder-app/pom.xml'
         }
       }
     }
     stage('integration_test') {
       steps {
         container('maven') {
           sh 'mvn test -Dtest=SpringBootDataJpaApplicationIntegrationTest -f bezkoder-app/pom.xml'
         }
       }
     }

     stage('code_coverage') {
       steps {
         container('maven') {
            sh 'mvn clean install -f bezkoder-app/pom.xml -Dmaven.test.failure.ignore=true sonar:sonar -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml -Dsonar.projectKey=container_solutions_task -Dsonar.host.url=http://sonarqube.sonarqube.svc:9000 -Dsonar.login=${JENKINS_SONAR_TOKEN}'
         }
       }
       post {
        always {
          archiveArtifacts artifacts: 'bezkoder-app/target/', fingerprint: true
        }
       }
     }
     
     stage('build_and_push') {
       steps {
         container('docker') {
          sh "docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD $DOCKER_HUB_REGISTRY"
          sh "docker build -t zakariaasadek/container_solutions_task:$BUILD_NUMBER bezkoder-app/"
          sh "docker push zakariaasadek/container_solutions_task:$BUILD_NUMBER"
         }
       }
     }
    
     stage('container_scanning') {
       steps {
         container('docker') {
          sh "curl -sOL https://github.com/aquasecurity/trivy/releases/download/v0.24.2/trivy_0.24.2_Linux-64bit.tar.gz"
          sh "tar -xvf trivy_0.24.2_Linux-64bit.tar.gz"
          sh "docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD $DOCKER_HUB_REGISTRY"
          sh "docker pull zakariaasadek/container_solutions_task:$BUILD_NUMBER"
          sh "./trivy image --severity HIGH,CRITICAL zakariaasadek/container_solutions_task:$BUILD_NUMBER"
         }
       }
     }
     
     stage('deploy_to_staging') {
       steps {
         container('docker') {
           sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"'  
           sh 'chmod u+x ./kubectl'  
           sh './kubectl get pods'
           sh './kubectl create ns staging'
           sh './kubectl get ns'
           // Grant admin permissions *in that namespace* to the service account for dynamic pod creation.
           sh './kubectl create rolebinding default-admin --clusterrole=admin --serviceaccount=staging:default --namespace=staging'
           sh 'ls -lart'
           sh "docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD $DOCKER_HUB_REGISTRY"
           sh "docker pull zakariaasadek/container_solutions_task:$BUILD_NUMBER"
           sh 'sed -i "s/@DOCKER_TAG@/$BUILD_NUMBER/" kubernetes/k8s-deployment.yaml'
           sh './kubectl apply -f kubernetes/persistentvolume.yaml -n staging'
           sh './kubectl apply -f kubernetes/persistentvolumeclaim.yaml -n staging'
           sh './kubectl apply -f kubernetes/k8s-deployment.yaml -n staging'
         }
       }
     }

     stage('smoke_test') {
       steps {
         container('docker') {
           sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"'  
           sh 'chmod u+x ./kubectl'  
           sh './kubectl get ns'
           sh """
             ipadress=\$(./kubectl get nodes -o jsonpath="{.items[0].status.addresses[0].address}")
             echo \$ipadress
           """
           sh """
             port=\$(./kubectl get --namespace staging -o jsonpath="{.spec.ports[0].nodePort}" services container-solution-app-service)
             echo \$port
           """
           sh 'curl http://\$(./kubectl get nodes -o jsonpath="{.items[0].status.addresses[0].address}"):\$(./kubectl get --namespace staging -o jsonpath="{.spec.ports[0].nodePort}" services container-solution-app-service)/actuator/health | grep "UP"'
         }
       }
     }

     stage('load_test') {
       steps {
         container('ab') {
            sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"'  
            sh 'chmod u+x ./kubectl'  
            sh './kubectl get ns'
            sh 'ab -V'
            sh 'ab -n 10000 -c 100 -k -H "Accept-Encoding: gzip, deflate" http://\$(./kubectl get nodes -o jsonpath="{.items[0].status.addresses[0].address}"):\$(./kubectl get --namespace staging -o jsonpath="{.spec.ports[0].nodePort}" services container-solution-app-service)/people'
         }
       }
     }

     stage('cleaning_up_K8S_resources') {
       steps {
         container('docker') {
           sh './kubectl delete -f kubernetes/k8s-deployment.yaml -n staging'
           sh './kubectl delete -f kubernetes/persistentvolumeclaim.yaml -n staging'
           sh './kubectl apply -f kubernetes/persistentvolume.yaml -n staging'
           sh './kubectl delete ns staging'
         }
       }
     }
   
     stage('cleaning_up_DockerImages') {
       steps {
         container('docker') {
           sh 'docker rmi zakariaasadek/container_solutions_task:$BUILD_NUMBER'
         }
       }
     }
  }
}