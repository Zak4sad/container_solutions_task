pipeline {
  environment {
    DOCKER_HUB_PASSWORD  = credentials('docker_hub_password')
    DOCKER_HUB_REGISTRY="https://index.docker.io/v1/"
    DOCKER_HUB_USER= "zakariaasadek"
    ARTIFACTORY_ACCESS_TOKEN = credentials('artifactory-access-token')
    CI = true
  }
  agent {
    kubernetes {
      yaml '''
        apiVersion: v1
        kind: Pod
        spec:
          containers:
          - name: maven
            image: maven:3.8.1-adoptopenjdk-11
            command:
            - cat
            tty: true
          - name: jfrog
            image: releases-docker.jfrog.io/jfrog/jfrog-cli-v2:2.2.0
            command: ['cat']
            tty: true  
          - name: docker
            image: docker:1.11
            command: ['cat']
            tty: true
            volumeMounts:
            - name: dockersock
              mountPath: /var/run/docker.sock
          volumes:
          - name: dockersock
            hostPath:
              path: /var/run/docker.sock
        '''
    }
  }
  stages {
     
     stage('maven-build') {
       steps {
         container('maven') {
           sh 'mvn clean package -B -f bezkoder-app/pom.xml'
         }
       }
       post {
        always {
          archiveArtifacts artifacts: 'bezkoder-app/target/spring-boot-data-jpa-0.0.1-SNAPSHOT.jar', fingerprint: true
        }
      }
     }
     stage('Upload to artifactory') {
       steps {
         container('jfrog') {
          sh 'export HTTPS_PROXY=http://www-proxy-hqdc.us.oracle.com:80/'
          sh 'export http_proxy=http://www-proxy-hqdc.us.oracle.com:80/' 
          sh 'jfrog rt ping --url=http://artifactory.artifactory.svc:8081/artifactory/'
          sh 'jfrog rt upload --url http://artifactory.artifactory.svc:8081/artifactory/container_solutions_task --access-token ${ARTIFACTORY_ACCESS_TOKEN} bezkoder-app/target/spring-boot-data-jpa-0.0.1-SNAPSHOT.jar container_solutions_task/'
         }
       }
     }
     stage('unit_test') {
       steps {
         container('maven') {
           sh 'mvn test -Dtest=SpringBootDataJpaApplicationUnitTest -f bezkoder-app/pom.xml'
         }
       }
     }
     stage('integration_test') {
       steps {
         container('maven') {
           sh 'mvn test -Dtest=SpringBootDataJpaApplicationIntegrationTest -f bezkoder-app/pom.xml'
         }
       }
     }
     
     stage('build_and_push') {
       steps {
         container('docker') {
          sh "docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD $DOCKER_HUB_REGISTRY"
          sh "docker build -t zakariaasadek/container_solutions_task:$BUILD_NUMBER bezkoder-app/"
          sh "docker push zakariaasadek/container_solutions_task:$BUILD_NUMBER"
         }
       }
     }
    
     stage('container_scanning') {
       steps {
         container('docker') {
          sh "curl -sOL https://github.com/aquasecurity/trivy/releases/download/v0.24.2/trivy_0.24.2_Linux-64bit.tar.gz"
          sh "tar -xvf trivy_0.24.2_Linux-64bit.tar.gz"
          sh "docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD $DOCKER_HUB_REGISTRY"
          sh "docker pull zakariaasadek/container_solutions_task:$BUILD_NUMBER"
          sh "./trivy image --severity HIGH,CRITICAL zakariaasadek/container_solutions_task:$BUILD_NUMBER"
         }
       }
     }
  }
}